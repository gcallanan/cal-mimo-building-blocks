/**
 * @author: Gareth Callanan
 *
 * @description: This creates an actor network that multiplies two matrices 
 * (A and B) together to produce output matrix C (AB=C). 
 *
 * The actor network is modelled as a systolic array as outlined in figure 2-4
 * (page 12) of:
 * S. Kung, "VLSI Array processors," in IEEE ASSP Magazine, vol. 2, no. 3, 
 * pp. 4-22, Jul 1985, doi: 10.1109/MASSP.1985.1163741 
 *
 * If Matrix A is an MxK matrix and Matrix B is an KxN then the systolic array
 * is MxN in size. Each processing element in the array is a single CAL actor.
 *
 * An example of the structure of the systolic array is shown here:
 *
 *                          Source B [Kx6]
 *                              |
 *                 --------------------------
 *                 |    |    |    |    |    |
 *             | - PE - PE - PE - PE - PE - PE 
 *             |   |    |    |    |    |    |
 *  Source A - | - PE - PE - PE - PE - PE - PE
 *  [4xK]      |   |    |    |    |    |    |
 *             | - PE - PE - PE - PE - PE - PE
 *             |   |    |    |    |    |    |
 *             | - PE - PE - PE - PE - PE - PE
 *             
 * Each individual row in Matrix A is fed into a different row of the systolic 
 * array. Similarly, each individual column in Matrix B is fed into a different 
 * column of the systolic array. Each PE calculates a different element of
 * matrix C. This value is put out on a seperate port not shown in the diagram
 * above and assembled by some collector architecture (still under construction
 * while writing this).
 *
 * The latency and throughput of the system increases as K increases
 * for a fixed M and N.
 */

namespace mat_mul:
    // Dimension M: The number of rows in matrix A.
    uint M = 4;

    // Dimension K: The number of columns in matrix A and columns in matrix B.
    uint K = 5;
    
    // Dimension N: The number of columns in matrix B.
    uint N = 6; 
    
    // The maximum number of tokens that can be stored in the FIFOS between actors.
    uint buffer_size=3; 

    // The number of matrices that the SourceA and SourceB actors will generate.
    uint num_matrices=3;

    /**
     * Actor that generates sample source matrix A of size RxC. 
     *
     * The values in the array are the natural numbers starting from zero
     * incrementing by one first along a row and then along the column. Each 
     * *row* is output on a differet port. For example in a 2x3 array:
     *
     * Generated A:
     *        0 1 2      
     *        3 4 5
     *          
     * Port output:
     *     Out[0]: 0 1 2
     *     Out[1]: 3 4 5
     *
     * This matrix is produced "num_matrices" times
     *
     * @parameter  R - the number of rows in the matrix
     * @paramter   C - the number of columns in the matrix.
     * @outputport Out[R] - An array of ports that matrix A is output on.
     *                      Each row of the matrix is output on a different
     *                      port in this port array.
     */
    actor SourceA(uint R, uint C) ==> int Out[R]:
        int colsOut := 0;
        int sentMatrices := 0;
        transmit: action ==> Out[0..R-1]:[output]
        guard sentMatrices < num_matrices
        var 
            List(type:int, size = R) output
        do
            foreach uint index in 0..R-1 do
                output[index] := index * C + colsOut;
            end
            colsOut := colsOut + 1;

            if(colsOut = C) then
                colsOut := 0;
                sentMatrices := sentMatrices + 1;
            end
        end
    end

    /**
     * Actor that generates sample source matrix B of size RxC. 
     *
     * The values in the array are the natural numbers starting from zero
     * incrementing by one first along a row and then along the column. Each 
     * *column* is output on a differet port. For example in a 2x3 array:
     *
     * Generated B:
     *        0 1 2      
     *        2 3 5
     *          
     * Port output:
     *     Out[0]: 0 2
     *     Out[1]: 1 3
     *     Out[2]: 2 5
     *
     * This matrix is produced "num_matrices" times
     *
     * @parameter  R - the number of rows in the matrix
     * @paramter   C - the number of columns in the matrix.
     * @outputport Out[C] - An array of ports that matrix B is output on.
     *                       Each column of the matrix is output on a different
     *                       port in the port array.
     */
    actor SourceB(uint R, uint C) ==> int Out[C]:
        int rowsOut := 0;
        int sentMatrices := 0;
        transmit: action ==> Out[0..C-1]:[output]
        guard sentMatrices < num_matrices
        var 
            List(type:int, size = C) output
        do
            foreach uint index in 0..C-1 do
                //print("" + (rowsOut * C + index) + " ");
                output[index] := rowsOut * C + index;
            end
            //println("");
            rowsOut := rowsOut + 1;
            
            if(rowsOut = R) then
                rowsOut := 0;
                sentMatrices := sentMatrices + 1;
            end
        end
    end

    /**
     *  A single processing element in the systolic array.
     *
     *  The array takes in an element from matrix A from its "In_left" port (a) and an element from
     *  matrix B from the "In_top" port (b). These elements are then multiplied together and stored in
     *  state variable "product" (axb). Once complete, a and b are passed to the next element in the array
     *  This is all illustrated here:
     *         b
     *         |             product = producet + axb 
     *         v
     *     a->|PE|->a
     *         |
     *         v
     *         b
     *
     *  If this PE is at position x,y in the grid, then it calculates the output C at position C_x,y.
     *  When K tokens have been received, then C_x,y has been completley calculated and its value is 
     *  sent out on a seperate port. product is then sent to 0 to calculate the value of C for the
     *  next matrix.
     *
     * @parameter  common_dimension - the common dimension, K, between the two matrices being calculated.
     * @inputport In_top - The port receiving the column from matrix B.
     * @inputport In_left - The port receiving the row from matrix A.
     * @outputport Out_bot - The port where the input from matrix B (from In_top) is then forwarded
     * @outputport Out_right - The port where the input from matrix A (from In_left) is then forwarded
     * @outputport C_element - The port where the completed calculated value of C_x,y is fowarded.
     */
    actor PE(uint common_dimension) int In_top, int In_left ==> int Out_bot, int Out_right, int C_element:
        int product;
        int num_calculations;
        
        normal: action In_left:[a], In_top:[b] ==> Out_right:[a], Out_bot:[b]
        do
            product := product + a*b;
            num_calculations := num_calculations + 1;
        end

        done: action ==> C_element:[outputProduct]
        guard
            num_calculations = common_dimension
        var
            int outputProduct = product
        do 
            //println("PE " + R_index + "," + C_index + ": " + product);
            product := 0;
            num_calculations := 0;
        end

        priority 
            done > normal;
        end
    end

    /**
     * A special case of the PE actor on the right hand side of the systolic array where Out_left
     * does not exist as it does not connect to anything.
     */
    actor PERight(uint common_dimension) int In_top, int In_left ==> int Out_bot, int C_element:
        int product;
        int num_calculations;
        
        normal: action In_left:[a], In_top:[b] ==> Out_bot:[b]
        do
            product := product + a*b;
            num_calculations := num_calculations + 1;
        end

        done: action ==> C_element:[outputProduct]
        guard
            num_calculations = common_dimension
        var
            int outputProduct = product
        do 
            //println("PE_R " + R_index + "," + C_index + ": " + product);
            product := 0;
            num_calculations := 0;
        end

        priority 
            done > normal;
        end
    end

    /**
     * A special case of the PE actor on the bottom row of the systolic array where Out_right
     * does not exist as it does not connect to anything.
     */
    actor PEBottom(uint common_dimension) int In_top, int In_left ==> int Out_right, int C_element:
        int product;
        int num_calculations;
        
        normal: action In_left:[a], In_top:[b] ==> Out_right:[a]
        do
            product := product + a*b;
            num_calculations := num_calculations + 1;
        end

        done: action ==> C_element:[outputProduct]
        guard
            num_calculations = common_dimension
        var
            int outputProduct = product
        do 
            //println("PE_B " + R_index + "," + C_index + ": " + product);
            product := 0;
            num_calculations := 0;
        end

        priority 
            done > normal;
        end
    end

    /**
     * A special case of the PE actor in the bottom right corner of the systolic array where
     * neither Out_left and Out_bot are required as the data no longer needs to be fowarded.
     */
    actor PEBottomRight(uint common_dimension) int In_top, int In_left ==> int C_element:
        int product;
        int num_calculations;
        
        normal: action In_left:[a], In_top:[b] ==>
        do
            product := product + a*b;
            num_calculations := num_calculations + 1;
        end

        done: action ==> C_element:[outputProduct]
        guard
            num_calculations = common_dimension
        var
            int outputProduct = product
        do  
            //println("PE_BR " + R_index + "," + C_index + ": " + product);
            product := 0;
            num_calculations := 0;
        end

        priority 
            done > normal;
        end
    end

    /**
     * Actor that collects individual elements for C matrix of size RxC. Sent to it from the 
     * individual PEs. Each element is captured on a different port.
     * 
     *  
     *
     * @parameter  R - the number of rows in the matrix
     * @paramter   C - the number of columns in the matrix.
     * @outputport Out[R*C] - An array of ports that matrix C is received from.
     *                        Each processing element calculates a different
     *                        element in C and sends it to the collector on a 
     *                        different port.
     */
    actor Collector(uint R, uint C) int In[R*C] ==>:
        action In[0..((R*C)-1)]:[matrix] ==>
        do
            foreach uint r in 0..R-1 do
                foreach uint c in 0..C-1 do
                    print("" + matrix[r * C + c] + " ");
                end
                println("");
            end
            println("");
        end
    end

    /**
     * Top network connecting all the above actors into a systolic array
     * of size MxN PEs as shown in the diagram in the top comment of this file. 
     
     * The network has a source A and a source B actor generating Matrix A and B
     * and feeding them into the file. Additionally it has a Collector matrix
     * that takes the output from the PE and prints the generated C matrix.
     */
    network Top() ==>:
    entities
        sourceA = SourceA(R=M,C=K);
        sourceB = SourceB(R=K,C=N);
        pes=[PE(common_dimension=K): for index in 0..(M-1)*(N-1)-1];
        pes_right = [PERight(common_dimension=K): for r in 0..M-2];
        pes_bottom = [PEBottom(common_dimension=K): for c in 0..N-2];
        pe_bottom_right = PEBottomRight(common_dimension=K);
        collector = Collector(R=M, C=N);
        //sinks=[SinkCap(index=index): for index in 0..(M)*(N)-1];
    structure
        // Connect matrix A source to grid
        foreach uint i in 0..M-2 do
            sourceA.Out[i] --> pes[i*(N-1)].In_left {bufferSize = buffer_size;};
        end
        sourceA.Out[M-1] --> pes_bottom[0].In_left {bufferSize = buffer_size;};

        // Connect matrix B source to grid
        foreach uint i in 0..N-2 do
            sourceB.Out[i] --> pes[i].In_top {bufferSize = buffer_size;};
        end
        sourceB.Out[N-1] --> pes_right[0].In_top {bufferSize = buffer_size;};

        // Connect all grid elements to each other - this looks a bit clunky, it could maybe be done in a better way
        // but it produces all the correct results.
        foreach uint row_index in 0..M-1 do
            foreach uint col_index in 0..N-1 do
                if row_index < M-2 && col_index < N-2 then
                    pes[row_index*(N-1) + col_index].Out_right --> pes[row_index*(N-1) + col_index + 1].In_left {bufferSize = buffer_size;};
                    pes[row_index*(N-1) + col_index].Out_bot --> pes[(row_index+1)*(N-1) + col_index].In_top {bufferSize = buffer_size;};
                    pes[row_index*(N-1) + col_index].C_element --> collector.In[row_index*(N) + col_index] {bufferSize = buffer_size;};
                    //pes[row_index*(N-1) + col_index].C_element --> sinks[row_index*(N) + col_index].In {bufferSize = buffer_size;};
                end

                if (row_index = M-2 && col_index = N-2) then
                    pes[row_index*(N-1) + col_index].Out_bot --> pes_bottom[col_index].In_top {bufferSize = buffer_size;};
                    pes[row_index*(N-1) + col_index].Out_right --> pes_right[row_index].In_left {bufferSize = buffer_size;};
                    pes[row_index*(N-1) + col_index].C_element --> collector.In[row_index*(N) + col_index] {bufferSize = buffer_size;};
                    //pes[row_index*(N-1) + col_index].C_element --> sinks[row_index*(N) + col_index].In {bufferSize = buffer_size;};
                end

                if row_index = M-2 && col_index < N-2 then
                    pes[row_index*(N-1) + col_index].Out_right --> pes[row_index*(N-1) + col_index + 1].In_left {bufferSize = buffer_size;};
                    pes[row_index*(N-1) + col_index].Out_bot --> pes_bottom[col_index].In_top {bufferSize = buffer_size;};
                    pes[row_index*(N-1) + col_index].C_element --> collector.In[row_index*(N) + col_index] {bufferSize = buffer_size;};
                    //pes[row_index*(N-1) + col_index].C_element --> sinks[row_index*(N) + col_index].In {bufferSize = buffer_size;};
                end

                if row_index = M-1 && col_index < N-2 then
                    pes_bottom[col_index].Out_right --> pes_bottom[col_index+1].In_left {bufferSize = buffer_size;};
                    pes_bottom[col_index].C_element --> collector.In[row_index*(N) + col_index] {bufferSize = buffer_size;};
                    //pes_bottom[col_index].C_element --> sinks[row_index*(N) + col_index].In {bufferSize = buffer_size;};
                end

                if row_index = M-1 && col_index = N-2 then
                    pes_bottom[col_index].Out_right --> pe_bottom_right.In_left {bufferSize = buffer_size;};
                    pes_bottom[col_index].C_element --> collector.In[row_index*(N) + col_index] {bufferSize = buffer_size;};
                    //pes_bottom[col_index].C_element --> sinks[row_index*(N) + col_index].In {bufferSize = buffer_size;};
                end

                if row_index < M-2 && col_index = N-2 then
                    pes[row_index*(N-1) + col_index].Out_bot --> pes[(row_index+1)*(N-1) + col_index].In_top {bufferSize = buffer_size;};
                    pes[row_index*(N-1) + col_index].Out_right --> pes_right[row_index].In_left {bufferSize = buffer_size;};
                    pes[row_index*(N-1) + col_index].C_element --> collector.In[row_index*(N) + col_index] {bufferSize = buffer_size;};
                    //pes[row_index*(N-1) + col_index].C_element --> sinks[row_index*(N) + col_index].In {bufferSize = buffer_size;};
                end

                if row_index < M-2 && col_index = N-1 then
                    pes_right[row_index].Out_bot --> pes_right[row_index+1].In_top {bufferSize = buffer_size;};
                    pes_right[row_index].C_element --> collector.In[row_index*(N) + col_index] {bufferSize = buffer_size;};
                    //pes_right[row_index].C_element --> sinks[row_index*(N) + col_index].In {bufferSize = buffer_size;};
                end

                if row_index = M-2 && col_index = N-1 then
                    pes_right[row_index].Out_bot --> pe_bottom_right.In_top {bufferSize = buffer_size;};
                    pes_right[row_index].C_element --> collector.In[row_index*(N) + col_index] {bufferSize = buffer_size;};
                    //pes_right[row_index].C_element --> sinks[row_index*(N) + col_index].In {bufferSize = buffer_size;};
                end

                if row_index = M-1 && col_index = N-1 then
                    pe_bottom_right.C_element --> collector.In[row_index*(N) + col_index] {bufferSize = buffer_size;};
                    //pe_bottom_right.C_element --> sinks[row_index*(N) + col_index].In {bufferSize = buffer_size;};
                end
            end
        end
    end

    /**
     * A debug actor for testing SourceA. Connect all the output ports of SourceA to the input ports of SinkA and
     * during execution, SinkA will print out the matrix produced by SourceA
     */
    actor SinkA(uint R, uint C) int In[R] ==> :
        List(type:int, size=R*C) matrix;
        uint receivedCols := 0;

        receive: action In[0..R-1]:[t] ==> 
        do
            foreach uint index in 0..R-1 do
                matrix[index * C + receivedCols] := t[index];
            end
            receivedCols := receivedCols + 1;
        end

        print: action ==>
        guard 
            receivedCols = C
        do
            println("Matrix C received, printing:");
            receivedCols := 0;
            foreach uint row_index in 0..R-1 do
                foreach uint col_index in 0..C-1 do
                    print("" + matrix[row_index*C + col_index] + " ");
                end
                println("");
            end
        end
    end

    /**
     * A debug actor for testing SourceB. Connect all the output ports of SourceA to the input ports of SinkA and
     * during execution, SinkB will print out the matrix produced by SourceA
     */
    actor SinkB(uint R, uint C) int In[C] ==> :
        List(type:int, size=R*C) matrix;
        uint receivedRows := 0;

        receive: action In[0..C-1]:[t] ==> 
        do
            foreach uint index in 0..C-1 do
                print("" + t[index] + " ");
                matrix[receivedRows * C + index] := t[index];
            end
            println("");
            receivedRows := receivedRows + 1;
        end

        print: action ==>
        guard 
            receivedRows = R
        do
            println("Done!");
            receivedRows := 0;
        end
    end

    /**
     * A simple cap actor to be used in cases where the Collector actor is not being used. Just consumes the C_element
     * from a PE and prints it out. Avoids the hardware backend having to generate a really big collector actor
     * with very high fan in.
     */
    actor SinkCap(uint index) int In ==>:
        receive: action In:[t] ==> 
        do
            println("" + index + ":" + t);
        end
    end

end

